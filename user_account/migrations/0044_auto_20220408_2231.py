# Generated by Django 3.2.7 on 2022-04-08 15:31

from django.db import migrations
from utils.enums import CustomUserStatus, QuarantineHistoryStatus, MemberQuarantinedStatus

def forwards_func(apps, schema_editor):
    # We get the model from the versioned app registry;
    # if we directly import it, it'll be the wrong version
    CustomUser = apps.get_model("user_account", "CustomUser")
    QuarantineHistory = apps.get_model("user_account", "QuarantineHistory")
    Pandemic = apps.get_model("form", "Pandemic")
    db_alias = schema_editor.connection.alias

    # delete all rows of QuarantineHistory table because of invalid data because of bug when add data to this table first time (migration number 0043)
    QuarantineHistory.objects.all().delete()

    # add new data to QuarantineHistory table
    custom_users = CustomUser.objects.using(db_alias).filter(role__name='MEMBER')
    for custom_user in list(custom_users):
        if hasattr(custom_user, 'member_x_custom_user') and custom_user.status in [CustomUserStatus.AVAILABLE, CustomUserStatus.LEAVE]:
            try:
                pandemic = Pandemic.objects.get(name='Covid-19')
            except:
                try:
                    pandemic = Pandemic.objects.get(id=1)
                except:
                    pandemic = None
            if custom_user.status == CustomUserStatus.AVAILABLE:
                status = QuarantineHistoryStatus.PRESENT
            else:
                status = QuarantineHistoryStatus.ENDED
            if custom_user.member_x_custom_user.quarantined_status in [MemberQuarantinedStatus.COMPLETED, MemberQuarantinedStatus.HOSPITALIZE]:
                end_type = custom_user.member_x_custom_user.quarantined_status
            else:
                end_type = None
            
            quarantine_history = QuarantineHistory(
                user=custom_user,
                pandemic=pandemic,
                quarantine_ward=custom_user.quarantine_ward,
                quarantine_room=custom_user.member_x_custom_user.quarantine_room,
                status=status,
                start_date=custom_user.member_x_custom_user.quarantined_at,
                end_date=custom_user.member_x_custom_user.quarantined_finished_at,
                end_type=end_type,
            )

            quarantine_history.save()

def reverse_func(apps, schema_editor):
    ...

class Migration(migrations.Migration):

    dependencies = [
        ('user_account', '0043_auto_20220406_2208'),
    ]

    operations = [
        migrations.RunPython(forwards_func, reverse_func),
    ]
